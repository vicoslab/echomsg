// This is an autogenerated file, do not modify!

#ifndef __{{ basename|upper }}_MSGS_H
#define __{{ basename|upper }}_MSGS_H

#include <echolib/message.h>
#include <echolib/datatypes.h>
#include <vector>

{% if namespace %}
{% set cppnamespace = namespace.replace('.', '::') + '::' %}
{% for n in namespace.split('.') -%}
namespace {{ n }} {
{% endfor %}
{% endif %}

{% for name, values in registry.enums.items() %}
enum {{ name }} { {% for v in values.keys() %}{{v}}{% if not loop.last %}, {% endif %}{% endfor %} };
{% endfor %}

{% for name in registry.structs.keys() -%}
class {{ name }};
{% endfor %}

{% for name, fields in registry.structs.items() %}
class {{ name }} {
public:
	{{ name }}() {
        {% for k, v in fields.items() -%}
	    {% if registry.types[v["type"]]["primitive"] -%}
             {% if v["default"] is string -%}
	            {{ k }} = "{{ v['default'] }}";
             {% elif v["default"] is none -%}
	         {% else -%}
	            {{ k }} = {{ v['default'] }};
	         {% endif -%}
	    {% else -%}
        {{ k }} = {{ v["type"] }}();
	    {% endif -%}
	    {%- endfor %}
    };
	virtual ~{{ name }}() {};
	{% for k, v in fields.items() -%}
	{% if v['array'] and v['length'] is none -%}
	{{ v["type"] }} {{ k }}[{{ v['length'] }}];
	{% elif v['array'] and not v['length'] is none -%}
	std::vector<{{ v["type"] }}> {{ k }};
	{% else -%}
	{{ v["type"] }} {{ k }};
	{% endif -%}
	{%- endfor %}
};
{% endfor %}

{% if namespace %}
{% for n in namespace.split('.') -%}
}
{% endfor %}
{% endif %}

namespace echolib {

{% for name, values in registry.enums.items() %}

template <> inline void read(MessageReader& reader, {{ cppnamespace }}{{ name }}& dst) {
	switch (reader.read<int>()) {
	{% for k, v in values.items() -%}
		case {{ v }}: dst = {{ cppnamespace }}{{ k }}; break;
	{% endfor %}
	}
}

template <> inline void write(MessageWriter& writer, const {{ cppnamespace }}{{ name }}& src) {
	switch (src) {
	{% for k, v in values.items() -%}
		case {{ cppnamespace }}{{ k }}: writer.write<int>({{ v }}); return;
	{% endfor %}
	}
}

{% endfor %}


{% for name, fields in registry.structs.items() %}
template <> inline void read(MessageReader& reader, {{ cppnamespace }}{{ name }}& dst) {
	{% for k, v in fields.items() -%}
	read(reader, dst.{{ k }});
	{%- endfor %}
}

template <> inline void write(MessageWriter& writer, const {{ cppnamespace }}{{ name }}& src) {
	{% for k, v in fields.items() -%}
	write(writer, src.{{ k }});
	{%- endfor %}
}
{% endfor %}

{% for name in registry.messages %}
{% set metadata = registry.types[name] %}

template <> inline string get_type_identifier<{{ cppnamespace }}{{ name }}>() { return string("{{ metadata['typehash'] }}"); }

template<> inline shared_ptr<Message> echolib::Message::pack<{{ cppnamespace }}{{ name }} >(const {{ cppnamespace }}{{ name }} &data) {
    MessageWriter writer;
    write(writer, data);
    return make_shared<BufferedMessage>(writer);
}

template<> inline shared_ptr<{{ cppnamespace }}{{ name }} > echolib::Message::unpack<{{ cppnamespace }}{{ name }}>(SharedMessage message) {
    MessageReader reader(message);
    shared_ptr<{{ cppnamespace }}{{ name }}> result(new {{ cppnamespace }}{{ name }}());
    read(reader, *result);
    return result;
}

{% endfor %}

}

#endif
