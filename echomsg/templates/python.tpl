# This is an autogenerated file, do not modify!

import os, sys

import echolib

def enum(name, enums):
    reverse = dict((value, key) for key, value in enums.iteritems())
    enums['reverse_mapping'] = reverse
    return type(name, (), enums)

{% for name, values in registry.enums.items() %}
{{ name }} = enum("{{ name }}", { {% for k, v in values.items() %}'{{k}}' : {{v}}{% if not loop.last %}, {% endif %}{% endfor %} })

echolib.registerType({{ name }}, lambda x: {{ name }}.reverse_mapping[x.readInt()], lambda x, o: x.writeInt(getattr({{ name }}, o)))

{% endfor %}

{% for name, fields in registry.structs.items() %}
class {{ name }}(object):
	def __init__(self):
		{% for k, v in fields.items() -%}
		{% set defval = v["default"] if not v["default"] is none else registry.types[v["type"]]["default"] %}
		{% if v['array'] and v['length'] is none -%}
		self.{{ k }} = []
		{% elif v['array'] and not v['length'] is none -%}
		self.{{ k }} = []
		{% elif registry.types[v["type"]]["primitive"] -%}
		self.{{ k }} = {{ defval|pyconstant }};
		{% else -%}
		self.{{ k }} = {{ v["type"] }}();
		{% endif -%}
		{%- endfor %}
		pass

	@staticmethod
	def read(reader):
		dst = {{ name }}()
		{% for k, v in fields.items() -%}
		{% if v['array'] -%}
		dst.{{ k }} = echolib.readList({{ registry.types[v["type"]]["python"] }}, reader)
		{% else %}
		dst.{{ k }} = echolib.readType({{ registry.types[v["type"]]["python"] }}, reader)
		{% endif %}
		{% endfor %}
		return dst

	@staticmethod
	def write(writer, obj):
		{% for k, v in fields.items() -%}
		{% if v['array'] -%}
		echolib.writeList({{ registry.types[v["type"]]["python"] }}, writer, obj.{{ k }})
		{% else %}
		echolib.writeType({{ registry.types[v["type"]]["python"] }}, writer, obj.{{ k }})
		{% endif %}
		{% endfor %}
		pass

echolib.registerType({{ name }}, {{ name }}.read, {{ name }}.write)

{% endfor %}

{% for name in registry.messages %}
{% set metadata = registry.types[name] %}
class {{ name }}Subscriber(echolib.Subscriber):

	def __init__(self, client, alias, callback):
		def _read(message):
			reader = echolib.MessageReader(message)
			return {{ name }}.read(reader)

		super({{ name }}Subscriber, self).__init__(client, alias, "{{ metadata["typehash"] }}", lambda x: callback(_read(x)))


class {{ name }}Publisher(echolib.Publisher):

	def __init__(self, client, alias):
		super({{ name }}Publisher, self).__init__(client, alias, "{{ metadata["typehash"] }}")

	def send(self, obj):
		writer = echolib.MessageWriter()
		{{ name }}.write(writer, obj)
		super({{ name }}Publisher, self).send(writer)

{% endfor %}





